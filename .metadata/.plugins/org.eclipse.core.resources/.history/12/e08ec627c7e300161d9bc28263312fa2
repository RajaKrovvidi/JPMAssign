package com.gbc.core;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.concurrent.ConcurrentSkipListSet;
import java.lang.Math;

import org.cliffc.high_scale_lib.NonBlockingHashMap;

public final class TradeCache 
{
	private final static class CacheHolder
	{
		static final TradeCache tradeCache = new TradeCache();
		// Constant value used in maps
		static final String constString = "V";
	}

	public static TradeCache getInstance()
	{
		return CacheHolder.tradeCache;
	}
	
	private TradeCache() 
	{
		_stockToTradesMap = new NonBlockingHashMap<String, ConcurrentSkipListSet<Trade>>();
	}
	
	/*
	 * This method can be called when the Stocks Registry is updated.
	 */
	public final void addNewSymbolTradesPair(String symbol)
	{
		ConcurrentSkipListSet<Trade> tradesMap = _stockToTradesMap.get(symbol);
		
		if (tradesMap == null) // Apply double check only when two threads want to create the value skiplist when not present
		{
			synchronized(this)
			{
				tradesMap = _stockToTradesMap.get(symbol);
				
				if (tradesMap == null)
				{
					tradesMap = new ConcurrentSkipListSet<Trade>();
					_stockToTradesMap.put(symbol, tradesMap);
				}
			}
		}
	}
	
	@SuppressWarnings("static-access")
	public final void recordTrade(String symbol, Trade trade) throws StockSymbolNotRegisteredException, IllegalArgumentException
	{
		if (symbol == null || symbol.isEmpty())
			throw new IllegalArgumentException("Need a valid symbol to recrod trade");

		ConcurrentSkipListSet<Trade> trades = _stockToTradesMap.get(symbol);
		
		if (trades == null) // implies creating a Stock without registering it first. 
		{
			// Here we sleep 10 milliseconds grace period and retry
			try
			{
				Thread.currentThread().sleep(10);
				trades = _stockToTradesMap.get(symbol);
				
				if (trades != null )
					trades.add(trade);
				
			}
			catch(InterruptedException exp)
			{
				// Do nothing
			}
			finally
			{
				if (trades == null)
				{
					String msg = new StringBuilder(symbol).append(" has not been registered. Please register the Stock and retry").toString();
					throw new StockSymbolNotRegisteredException(trade, msg);	
				}
			}
		} 
		else // regular case - just record the trade
		{
			trades.add(trade);
		}
	}
	
	/**
	 * The method to get an unmodifiable view of the unerlying which can be used by users to calculate vwAp
	 * @param symbol
	 * @return
	 */
	public final SortedSet<Trade> getTradesForSymbol(String symbol)
	{
		SortedSet<Trade> s = _stockToTradesMap.get(symbol);
		
		if (s == null)
			s = (SortedSet<Trade>) Collections.unmodifiableSet(new HashSet<Trade>()) ;
		else 
			s = (SortedSet<Trade>)Collections.unmodifiableSortedSet(s);
		
		return s;
	}
	
	/*
	 * A method to get weighted volume avg. price for a given stock
	 */
	public final SortedSet<Trade> getUnmodifiableTradesSet(String symbol) throws NoTradesRecordedException
	{
		SortedSet<Trade> s = null;

		try
		{
			s = Collections.unmodifiableSortedSet(_stockToTradesMap.get(symbol));
		}
		catch(NullPointerException exp)
		{
		}
		finally
		{
			if (s == null || s.isEmpty())
			{
				// It is good to throw an exception than silently return 0 / 1 for Index Level
				throw new NoTradesRecordedException("Trades Cache/Store is empty.. please try again later");
			}
		}

		return s;
	}

	/*
	 * A method to get weighted volume price
	 */
	public final Collection<ConcurrentSkipListSet<Trade>> getAllUnmodifiableSetsOfTradeSets() throws NoTradesRecordedException,CannotCalculateVWAPException
	{
		
		Collection<ConcurrentSkipListSet<Trade>> setOfTradeSets = null;
		try
		{
			setOfTradeSets = Collections.unmodifiableCollection(_stockToTradesMap.values());
		}
		catch(NullPointerException exp)
		{
			 // Do we want to log this ? Guess not
		}
		finally
		{
			if (setOfTradeSets == null || setOfTradeSets.isEmpty() )
			{
				// It is good to throw an exception than silently return 0 / 1 for Index Level
				throw new NoTradesRecordedException("Trades Cache/Store is empty.. please try again later");
			}
		}

		return setOfTradeSets;
	}

	public final long size()
	{
		return _stockToTradesMap.size();
	}
	
	public final Set<String> getAllKeys() throws NullPointerException
	{
		return Collections.unmodifiableSet(_stockToTradesMap.keySet());
	}
	
	private NonBlockingHashMap<String, ConcurrentSkipListSet<Trade> >  _stockToTradesMap; 
}