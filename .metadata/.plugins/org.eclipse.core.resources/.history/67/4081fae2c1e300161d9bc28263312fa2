package com.gbc.core_unittests;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ConcurrentSkipListSet;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.gbc.core.InvalidStockParameterException;
import com.gbc.core.StocksRegister;
import com.gbc.core.TradeCache;
import com.gbc.core.Stock.StockBuilder;

public class TradeCacheTests {

	StocksRegister sr = null;
	TradeCache tc = null;
	
	
	public static void populateTradeCache(StocksRegister sRegister, TradeCache tCache, int nTrades)
	{
		// for each stock entry in sr, 
		// populate TradeCache with nTrades
		ArrayList<Thread> ts = new ArrayList<Thread>();
		Random rnd = new Random();
		
		try
		{
			for (String s: sRegister.getSymbols())
			{
				
			
			for (int i =0; i < nTrades; ++i)
			{
				Thread thread = new Thread(new Runnable() 
				{
	
				    @Override
				    public void run() 
				    {
				    	String symbol = ;
				    	try 
				    	{
				    		int lastDividend = (int) (rnd.nextFloat() * 8);
				    		int fixedDividend = (int) (rnd.nextFloat() * 8);
				    		if ((int)(rnd.nextFloat() * 2) % 2 == 0)
				    			sr.addStock(symbol, StockBuilder.createCommonStock(symbol, 100, lastDividend+.01));
				    		else
				    			sr.addStock(symbol, StockBuilder.createPreferredStock(symbol, 100, lastDividend+.01, fixedDividend+0.001));
							generatedSymbols.add(symbol);
						}
				    	catch (InvalidStockParameterException e)
				    	{
							// fail(e.getMessage());
							//e.printStackTrace();
						} 
				    }
				            
				});
				ts.add(thread);
				thread.start();
			}
			
			for (int i = 0; i< ts.size(); ++i)
				ts.get(i).join();
			
		}
		catch(Exception e)
		{
			fail("Not yet implemented");
		}

		
	}
	
	@Before
	public void setUp() throws Exception 
	{
		// Get an instance
		sr = StocksRegister.getInstance();
		// Populate ..
		ConcurrentSkipListSet<String> generatedSymbols = new ConcurrentSkipListSet<String>();
		StocksRegisterTests.populateStocksRegister(sr, ts, 1000, generatedSymbols);
		System.out.println("Populated stocks register with #Symbols " + generatedSymbols.size());
		tc = TradeCache.getInstance();
		
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void test() {
		fail("Not yet implemented");
	}

}
