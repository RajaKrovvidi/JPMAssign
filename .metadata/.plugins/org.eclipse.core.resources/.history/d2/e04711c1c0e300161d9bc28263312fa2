package com.gbc.core_unittests;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentSkipListSet;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.gbc.core.InvalidStockParameterException;
import com.gbc.core.Stock;
import com.gbc.core.Stock.StockBuilder;
import com.gbc.core.StocksRegister;

public class StocksRegisterTests 
{
	StocksRegister register;
	@Before
	public void setUp() throws Exception 
	{
		
		register = StocksRegister.getInstance();
	}

	@After
	public void tearDown() throws Exception 
	{
		
	}

	public static String getRandomSymbol(Random rnd)
	{
	    String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        StringBuilder salt = new StringBuilder();

        while (salt.length() < 4) 
        {
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;
	}
	
	public static void populateStocksRegister(StocksRegister sr, ArrayList<Thread> ts, int nThreads, ConcurrentSkipListSet<String> generatedSymbols )
	{
        Random rnd = new Random();
		
		try
		{
			for (int i =0; i < nThreads; ++i)
			{
				Thread thread = new Thread(new Runnable() 
				{
	
				    @Override
				    public void run() 
				    {
				    	String symbol = getRandomSymbol(rnd);
				    	try 
				    	{
				    		int lastDividend = (int) (rnd.nextFloat() * 8);
				    		int fixedDividend = (int) (rnd.nextFloat() * 8);
				    		if ((int)(rnd.nextFloat() * 2) % 2 == 0)
				    			sr.addStock(symbol, StockBuilder.createCommonStock(symbol, 100, lastDividend+.01));
				    		else
				    			sr.addStock(symbol, StockBuilder.createPreferredStock(symbol, 100, lastDividend+.01, fixedDividend+0.001));
							generatedSymbols.add(symbol);
						}
				    	catch (InvalidStockParameterException e)
				    	{
							fail(e.getMessage());
							//e.printStackTrace();
						} 
				    }
				            
				});
				ts.add(thread);
				thread.start();
			}
			
			for (int i = 0; i< ts.size(); ++i)
				ts.get(i).join();
			
		}
		catch(Exception e)
		{
			fail("Not yet implemented");
		}
		
	}
	
	@Test
	public void testConcurrentAdds() 
	{
		ArrayList<Thread> ts = new ArrayList<Thread>();
		ConcurrentSkipListSet<String> generatedSymbols = new ConcurrentSkipListSet<String>();

		// Generate 1000 threads and start saving the Stocks
		TreeSet<String> foundSymbols = new TreeSet<String>(register.getSymbols());
		System.out.println("Generated " + generatedSymbols.size() + " vs. Found " + foundSymbols.size());
		assertTrue(generatedSymbols.size() == foundSymbols.size());
		for(String s: foundSymbols)
		{
			
			Stock stock = (Stock)register.getStock(s); 
			if (stock.isCommonStock())
			{
				//System.out.println("For Symbol " + s + " and dYield is " + stock.dividendYield(100) + " where Last Dividend is " + stock.getLastDividend());
				assertTrue(stock.dividendYield(100) == stock.getLastDividend()/100);
				assertTrue(stock.peRatio(100) == 100/stock.getLastDividend());	
			}
			else
			{
				//System.out.println("For Symbol " + s + " and dYield is " + stock.dividendYield(100) + " where Fixed Dividend is " + stock.getFixedDividend());
				assertTrue(stock.dividendYield(100) == (stock.getFixedDividend() * stock.getParValue())/100);
				assertTrue(stock.peRatio(100) == 100/(stock.getFixedDividend() * stock.getParValue()));
				
			}
		}
		System.out.println("Computed dividendYield and p/e ratios for all stocks in the registry");
	}
}
