package com.gbc.core;

import java.util.Set;

import org.cliffc.high_scale_lib.NonBlockingHashMap;

/*
 * A class to register / cache all valid Stocks
 */
public final class StocksRegister 
{
	private static class RegistryHolder
	{
		 private static StocksRegister 	_singleInstance = new StocksRegister();
	}
	
	public static StocksRegister getInstance()
	{
		return RegistryHolder._singleInstance;
	}
	
	private StocksRegister() 
	{
		_stocksMap = new NonBlockingHashMap<String, Stock>();
	}
	
	/*
	 * If a given symbol is present, this method will override any existing values
	 */
	public final void addStock(String symbol, Stock stock)
	{
		_stocksMap.put(symbol, stock);
		TradeCache.getInstance().addNewSymbolTradesPair(symbol);
	}
	
	
	public final Stock getStock(String symbol) throws InvalidStockSymbolException
	{
		if (symbol != null && !symbol.isEmpty() && _stocksMap.containsKey(symbol))
			return _stocksMap.get(symbol);
		else 
			throw new InvalidStockSymbolException(new StringBuilder(symbol).append(" Symbol not registered/found ").toString());
	}
	
	public final Set<String> getSymbols()
	{
		return _stocksMap.keySet();
	}
	
	public final boolean containsKey(String symbol)
	{
		return _stocksMap.containsKey(symbol);
	}
	
	private NonBlockingHashMap<String, Stock>  _stocksMap;
}